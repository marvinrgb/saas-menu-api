openapi: 3.1.0
info:
  title: Restaurant Menu API
  description: |
    A comprehensive API for managing restaurant menus, categories, menu items, and options.
    This API allows restaurant owners to manage their menu structure, including categories,
    menu items, and customization options.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://api.example.com/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Resource not found"

    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 10

    Restaurant:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
        address:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        logoUrl:
          type: string
          nullable: true
        qrCodeUrl:
          type: string
          nullable: true
        subscriptionStatus:
          type: string
          enum: [free, basic, premium]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Menu:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
        description:
          type: string
          nullable: true
        isActive:
          type: boolean
        lastUpdated:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        restaurantId:
          type: string
          format: cuid

    Category:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
        description:
          type: string
          nullable: true
        order:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        menuId:
          type: string
          format: cuid
        menuItems:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'

    MenuItem:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
        isAvailable:
          type: boolean
        imageUrl:
          type: string
          nullable: true
        order:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        categoryId:
          type: string
          format: cuid
        optionGroups:
          type: array
          items:
            $ref: '#/components/schemas/OptionGroup'

    OptionGroup:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
        isMultiSelect:
          type: boolean
        minSelections:
          type: integer
          minimum: 0
        maxSelections:
          type: integer
          minimum: 0
        order:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        menuItemId:
          type: string
          format: cuid
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'

    Option:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
        priceAdjustment:
          type: number
          format: float
        isAvailable:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        optionGroupId:
          type: string
          format: cuid

paths:
  /restaurants:
    get:
      summary: List all restaurants
      description: Retrieve a paginated list of restaurants
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, createdAt, updatedAt]
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: List of restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new restaurant
      description: Create a new restaurant with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                address:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                logoUrl:
                  type: string
                subscriptionStatus:
                  type: string
                  enum: [free, basic, premium]
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Restaurant'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /restaurants/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: cuid
    get:
      summary: Get a restaurant by ID
      description: Retrieve detailed information about a specific restaurant
      responses:
        '200':
          description: Restaurant details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Restaurant'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update a restaurant
      description: Update an existing restaurant's information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                logoUrl:
                  type: string
                subscriptionStatus:
                  type: string
                  enum: [free, basic, premium]
      responses:
        '200':
          description: Restaurant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Restaurant'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a restaurant
      description: Delete a restaurant and all its associated data
      responses:
        '204':
          description: Restaurant deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /menus:
    get:
      summary: List all menus
      description: Retrieve a paginated list of menus
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: restaurantId
          in: query
          schema:
            type: string
            format: cuid
        - name: includeCategories
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of menus
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Menu'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new menu
      description: Create a new menu for a restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - restaurantId
              properties:
                name:
                  type: string
                description:
                  type: string
                isActive:
                  type: boolean
                restaurantId:
                  type: string
                  format: cuid
      responses:
        '201':
          description: Menu created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Menu'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /categories:
    get:
      summary: List all categories
      description: Retrieve a paginated list of categories
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: menuId
          in: query
          schema:
            type: string
            format: cuid
        - name: includeItems
          in: query
          schema:
            type: boolean
            default: false
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, order, createdAt]
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new category
      description: Create a new category in a menu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - menuId
              properties:
                name:
                  type: string
                description:
                  type: string
                order:
                  type: integer
                  minimum: 0
                menuId:
                  type: string
                  format: cuid
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: cuid
    get:
      summary: Get a category by ID
      description: Retrieve detailed information about a specific category
      parameters:
        - name: includeItems
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update a category
      description: Update an existing category's information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                order:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a category
      description: Delete a category and all its associated menu items
      responses:
        '204':
          description: Category deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /categories/{id}/reorder:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: cuid
    patch:
      summary: Reorder a category
      description: Update the display order of a category within its menu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order
              properties:
                order:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Category reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /categories/menu/{menuId}:
    parameters:
      - name: menuId
        in: path
        required: true
        schema:
          type: string
          format: cuid
    get:
      summary: Get categories by menu ID
      description: Retrieve all categories for a specific menu
      parameters:
        - name: includeItems
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of categories for the menu
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 