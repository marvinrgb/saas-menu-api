// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Changed to sqlite
  url      = env("DATABASE_URL") // Typically "file:./dev.db" for SQLite
}

// Model for a Restaurant
model Restaurant {
  id                String    @id @default(cuid())
  name              String    @unique // Restaurant name should be unique
  address           String?
  phone             String?
  email             String?   @unique
  logoUrl           String?   // URL to the restaurant's logo
  qrCodeUrl         String?   // URL to the generated QR code for the menu
  subscriptionStatus String   @default("free") // e.g., "free", "basic", "premium"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  menus             Menu[]    // A restaurant can have multiple menus (e.g., Dinner, Lunch)
}

// Model for a Menu (e.g., Dinner Menu, Lunch Menu, Daily Specials)
model Menu {
  id                String    @id @default(cuid())
  name              String    // e.g., "Dinner Menu", "Lunch Menu", "Daily Specials"
  description       String?
  isActive          Boolean   @default(true) // To easily switch which menu is currently active
  lastUpdated       DateTime  @updatedAt // Automatically updates on menu changes
  createdAt         DateTime  @default(now())

  restaurantId      String
  restaurant        Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  categories        Category[] // A menu has multiple categories
}

// Model for a Category within a Menu (e.g., Appetizers, Main Courses, Desserts)
model Category {
  id                String    @id @default(cuid())
  name              String
  description       String?
  order             Int       @default(0) // To define the display order of categories
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  menuId            String
  menu              Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)

  menuItems         MenuItem[] // A category has multiple menu items
}

// Model for an individual Menu Item
model MenuItem {
  id                String    @id @default(cuid())
  name              String
  description       String?
  price             Decimal   // Price of the menu item (Prisma maps Decimal to Float in SQLite)
  isAvailable       Boolean   @default(true) // To quickly mark an item as unavailable (e.g., sold out)
  imageUrl          String?   // URL to an image of the menu item
  order             Int       @default(0) // To define the display order of menu items within a category
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  categoryId        String
  category          Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  optionGroups      OptionGroup[] // A menu item can have multiple option groups (e.g., "Toppings", "Size")
}

// Model for a group of options for a MenuItem (e.g., "Toppings", "Size")
model OptionGroup {
  id                String    @id @default(cuid())
  name              String    // e.g., "Choose your toppings", "Select size"
  isMultiSelect     Boolean   @default(false) // True if multiple options can be selected (e.g., multiple toppings)
  minSelections     Int       @default(0) // Minimum number of options required
  maxSelections     Int       @default(1) // Maximum number of options allowed (1 for single select)
  order             Int       @default(0) // To define the display order of option groups
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  menuItemId        String
  menuItem          MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  options           Option[]  // An option group has multiple individual options
}

// Model for an individual Option within an OptionGroup (e.g., "Pepperoni", "Small", "Large")
model Option {
  id                String    @id @default(cuid())
  name              String    // e.g., "Pepperoni", "Extra Cheese", "Small", "Large"
  priceAdjustment   Decimal   @default(0.00) // Price difference for this option (can be positive or negative)
  isAvailable       Boolean   @default(true) // To quickly mark an option as unavailable
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  optionGroupId     String
  optionGroup       OptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
}
